// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2557.SOTABots2015.subsystems;

import org.usfirst.frc2557.SOTABots2015.RobotMap;
import edu.wpi.first.wpilibj.*;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveTrain extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController frontLeft = RobotMap.driveTrainFrontLeft;
    SpeedController frontRight = RobotMap.driveTrainFrontRight;
    SpeedController backLeft = RobotMap.driveTrainBackLeft;
    SpeedController backRight = RobotMap.driveTrainBackRight;
    RobotDrive robotDrive41 = RobotMap.driveTrainRobotDrive41;
    Gyro gyro = RobotMap.gyro;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void arcadeDrive (Joystick joystick1){
    	robotDrive41.arcadeDrive(joystick1);
    }
    public void mecanumDrive_Cartesian123(double x,double y,double rotation,double gyroAngle){
    	robotDrive41.mecanumDrive_Cartesian(x, y, rotation, gyro.getAngle());
    	//robotDrive41.mecanumDrive_Polar(x, y, rotation);//gyro.getAngle());
    	
    }
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public void center(String s, double min,double max, double target) {
    	/* eg: DriveTrain.center(rangeFinder, min deg, max deg, target deg)
    	 * This method should call Radar.<nameHere>() with the variables requested above.
    	 * That call would return the degrees that the drivetrain would need to turn in
    	 * order to center the object on to the 90 deg target plane. inputting the degrees
    	 * to the gyro to turn the appropriate direction.
    	 */
    	
    }
    public void driveTo(){
    	/* Use DriveTrain.center to move towards target.
    	 * When target reaches certain distance, slow down a smidge, count by encoder
    	 * to move fwd x distance (determined by distance from inches to the frame).
    	 */
    }
    public void right(double count){
    	/* Strafe Right. Calculate by encoders or by Gyro. If By Gyro, Accelerometers
    	 * to pool for distance traveled)
    	 */
    }
    public void left(double count){
    	/* Strafe left. Calculate by encoders or by Gyro. If By Gyro, Accelerometers
    	 * to pool for distance traveled)
    	 */
    }
    public void fwd(double count){
    	/* Forward by encoder values.
    	 */
    }
    public void bwd(double count){
    	/* Back by encoder count.
    	 */
    }
    public void cWise(double gDeg){
    	/* Rotate clockwise by degrees passed to Gyro.
    	 */
    }
    public void cCWise(double gDeg){
    	/* Rotate counterClockwise by degrees passed to Gyro.
    	 */
    }
   }

